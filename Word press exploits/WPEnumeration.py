import urllib.request as request
import json
import re
hashmap = {}


class WPEnumeration(object):

    _MIN_ID = 0
    _MAX_ID = 20


    def __init__(self, domain, additional_data=None, proxies=None):
        self.domain = domain
        self.additional = additional_data
        self.proxies = proxies

    def enum_by_author(self, first_id=_MIN_ID, last_id=_MAX_ID):
        size = len(self.domain)
        aps = self.domain.find('"')
        url = self.domain[aps + 1:size - 1]
        list = []
        for i in range(first_id, last_id):
            new_url = url + "/?author=" + str(i)
            try:
                html_content = request.urlopen(new_url).read().decode('utf-8')
                index = html_content.find('<link rel="canonical')
                if (index != -1):
                    auth = html_content[index:index + 70].find("author")
                    end = html_content[index + auth + 7:index + auth + 15].find('/')
                    username = html_content[index + auth + 7:index + auth + end + 7]
                    if (auth != -1):
                        list.append(username)
                        hashmap[i] = username

                else:
                    pass
            except:
                pass
        return list
    def enum_by_json(self, first_id=_MIN_ID, last_id=_MAX_ID):
        list=[]
        size = len(self.domain)
        aps = self.domain.find('"')
        url = self.domain[aps + 1:size - 1]
        json_content = request.urlopen(url + "/wp-json/wp/v2/users").read().decode('utf-8')
        for m in re.finditer('{"id"', json_content):
            id_index = m.start()
            id_comma = json_content[id_index:].find(",")
            id = json_content[id_index + 6:id_index + id_comma]
            name_comma = json_content[id_index + id_comma + 1:].find(",")
            name = json_content[id_comma + id_index + 9:id_index + id_comma + name_comma]
            if id not in hashmap.keys():
                if int(id)>=first_id and int(id)<=last_id:
                    hashmap[id] = name
                    list.append(name)
        return list
    def enumerate(self, min_id =_MIN_ID, max_id =_MAX_ID ,proxies=None):
        try:
            if self.is_enumeration_possible(min_id,max_id):
                print(hashmap)
                return hashmap
            else:
                print(" Enumeration is NOT possible!")
        except Exception as e:
            print(e)


    def get_usernames(self):
        return hashmap.values()



    def get_users_data(self):
        return hashmap



    def is_enumeration_possible(self,first_id=_MIN_ID,second_id=_MAX_ID): #Two ways to enumerate: by json or by author
        self.enum_by_json(first_id,second_id)
        self.enum_by_author(first_id,second_id)
        if(bool(hashmap)):
            return True
        else:
            return False


# if __name__ == "__main__":
#     domain = input("Enter a domain: \n")
    # detector = WPEnumeration(domain).enumerate()
    # WPEnumeration.enum_by_json()
    # print(WPEnumerator(domain).is_enumeration_possible())

